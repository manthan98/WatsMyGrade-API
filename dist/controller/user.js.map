{"version":3,"sources":["../../src/controller/user.js"],"names":["config","db","api","post","req","res","newUser","username","body","password","save","err","send","json","message","get","find","users","delete","findById","params","id","user","status","remove","_id","course","grade","courses","findByIdAndRemove","response","newCourse","title","credits","instructor","push","put","average","grades","newGrade","name","mark","weight"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;kBAEc,gBAAoB;AAAA,QAAjBA,MAAiB,QAAjBA,MAAiB;AAAA,QAATC,EAAS,QAATA,EAAS;;AAC9B,QAAIC,MAAM,sBAAV;;AAEA;;AAEA;AACAA,QAAIC,IAAJ,CAAS,MAAT,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5B,YAAIC,UAAU,oBAAd;AACAA,gBAAQC,QAAR,GAAmBH,IAAII,IAAJ,CAASD,QAA5B;AACAD,gBAAQG,QAAR,GAAmBL,IAAII,IAAJ,CAASC,QAA5B;AACAH,gBAAQI,IAAR,CAAa,eAAO;AAChB,gBAAGC,GAAH,EAAQ;AACJN,oBAAIO,IAAJ,CAASD,GAAT;AACH;AACDN,gBAAIQ,IAAJ,CAAS,EAAEC,SAAS,0BAAX,EAAT;AACH,SALD;AAMF,KAVD;;AAYA;AACAZ,QAAIa,GAAJ,CAAQ,GAAR,EAAa,UAACX,GAAD,EAAMC,GAAN,EAAc;AACvB,uBAAKW,IAAL,CAAU,EAAV,EAAc,UAACL,GAAD,EAAMM,KAAN,EAAgB;AAC1B,gBAAGN,GAAH,EAAQ;AACJN,oBAAIO,IAAJ,CAASD,GAAT;AACH;AACDN,gBAAIQ,IAAJ,CAASI,KAAT;AACH,SALD;AAMH,KAPD;;AASA;AACAf,QAAIgB,MAAJ,CAAW,MAAX,EAAmB,UAACd,GAAD,EAAMC,GAAN,EAAc;AAC7B,uBAAKc,QAAL,CAAcf,IAAIgB,MAAJ,CAAWC,EAAzB,EAA6B,UAACV,GAAD,EAAMW,IAAN,EAAe;AACxC,gBAAGX,GAAH,EAAQ;AACJN,oBAAIkB,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqBD,GAArB;AACA;AACH;AACD,gBAAGW,SAAS,IAAZ,EAAkB;AACdjB,oBAAIkB,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqB,iBAArB;AACA;AACH;AACD,2BAAKY,MAAL,CAAY;AACRC,qBAAKrB,IAAIgB,MAAJ,CAAWC;AADR,aAAZ,EAEG,UAACV,GAAD,EAAMW,IAAN,EAAe;AACd,oBAAGX,GAAH,EAAQ;AACJN,wBAAIkB,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqBD,GAArB;AACA;AACH;AACD,iCAAOa,MAAP,CAAc;AACVF,0BAAMlB,IAAIgB,MAAJ,CAAWC;AADP,iBAAd,EAEG,UAACV,GAAD,EAAMe,MAAN,EAAiB;AAChB,wBAAGf,GAAH,EAAQ;AACJN,4BAAIkB,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqBD,GAArB;AACA;AACH;AACD,oCAAMa,MAAN,CAAa;AACTE,gCAAQtB,IAAIgB,MAAJ,CAAWC;AADV,qBAAb,EAEG,UAACV,GAAD,EAAMgB,KAAN,EAAgB;AACf,4BAAGhB,GAAH,EAAQ;AACJN,gCAAIO,IAAJ,CAASD,GAAT;AACH;AACDN,4BAAIQ,IAAJ,CAAS,EAAEC,SAAS,4BAAX,EAAT;AACH,qBAPD;AAQH,iBAfD;AAgBH,aAvBD;AAwBH,SAjCD;AAkCH,KAnCD;;AAqCA;;AAEA;AACAZ,QAAIa,GAAJ,CAAQ,cAAR,EAAwB,UAACX,GAAD,EAAMC,GAAN,EAAc;AAClC,yBAAOW,IAAP,CAAY,EAAEM,MAAMlB,IAAIgB,MAAJ,CAAWC,EAAnB,EAAZ,EAAqC,UAACV,GAAD,EAAMiB,OAAN,EAAkB;AACnD,gBAAGjB,GAAH,EAAQ;AACJN,oBAAIO,IAAJ,CAASD,GAAT;AACH;AACDN,gBAAIQ,IAAJ,CAASe,OAAT;AACH,SALD;AAMH,KAPD;;AASA;AACA1B,QAAIgB,MAAJ,CAAW,cAAX,EAA2B,UAACd,GAAD,EAAMC,GAAN,EAAc;AACrC,yBAAOwB,iBAAP,CAAyBzB,IAAIgB,MAAJ,CAAWC,EAApC,EAAwC,UAACV,GAAD,EAAMe,MAAN,EAAiB;AACrD,gBAAII,WAAW;AACXhB,yBAAS,6BADE;AAEXO,oBAAIK,OAAOD;AAFA,aAAf;AAIApB,gBAAIkB,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqBkB,QAArB;AACH,SAND;AAOH,KARD;;AAUA;AACA5B,QAAIC,IAAJ,CAAS,kBAAT,EAA6B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvC,uBAAKc,QAAL,CAAcf,IAAIgB,MAAJ,CAAWC,EAAzB,EAA6B,UAACV,GAAD,EAAMW,IAAN,EAAe;AACxC,gBAAGX,GAAH,EAAQ;AACJN,oBAAIO,IAAJ,CAASD,GAAT;AACH;AACD,gBAAIoB,YAAY,sBAAhB;AACAA,sBAAUC,KAAV,GAAkB5B,IAAII,IAAJ,CAASwB,KAA3B;AACAD,sBAAUE,OAAV,GAAoB7B,IAAII,IAAJ,CAASyB,OAA7B;AACAF,sBAAUG,UAAV,GAAuB9B,IAAII,IAAJ,CAAS0B,UAAhC;AACAH,sBAAUT,IAAV,GAAiBA,KAAKG,GAAtB;AACAM,sBAAUrB,IAAV,CAAe,UAACC,GAAD,EAAMe,MAAN,EAAiB;AAC5B,oBAAGf,GAAH,EAAQ;AACJN,wBAAIO,IAAJ,CAASD,GAAT;AACH;AACDW,qBAAKM,OAAL,CAAaO,IAAb,CAAkBJ,SAAlB;AACAT,qBAAKZ,IAAL,CAAU,eAAO;AACb,wBAAGC,GAAH,EAAQ;AACJN,4BAAIO,IAAJ,CAASD,GAAT;AACH;AACDN,wBAAIQ,IAAJ,CAAS,EAAEC,SAAS,4BAAX,EAAT;AACH,iBALD;AAMH,aAXD;AAYH,SArBD;AAsBH,KAvBD;;AAyBA;AACAZ,QAAIkC,GAAJ,CAAQ,qBAAR,EAA+B,UAAChC,GAAD,EAAMC,GAAN,EAAc;AACzC,yBAAOc,QAAP,CAAgBf,IAAIgB,MAAJ,CAAWC,EAA3B,EAA+B,UAACV,GAAD,EAAMe,MAAN,EAAiB;AAC5C,gBAAIf,GAAJ,EAAS;AACLN,oBAAIO,IAAJ,CAASD,GAAT;AACH;AACDe,mBAAOM,KAAP,GAAe5B,IAAII,IAAJ,CAASwB,KAAxB;AACAN,mBAAOO,OAAP,GAAiB7B,IAAII,IAAJ,CAASyB,OAA1B;AACAP,mBAAOQ,UAAP,GAAoB9B,IAAII,IAAJ,CAAS0B,UAA7B;AACAR,mBAAOW,OAAP,GAAiBjC,IAAII,IAAJ,CAAS6B,OAA1B;AACAX,mBAAOhB,IAAP,CAAY,eAAO;AACf,oBAAIC,GAAJ,EAAS;AACLN,wBAAIO,IAAJ,CAASD,GAAT;AACH;AACDN,oBAAIQ,IAAJ,CAAS,EAAEC,SAAS,sBAAX,EAAT;AACH,aALD;AAMH,SAdD;AAeH,KAhBD;;AAkBA;;AAEA;AACAZ,QAAIa,GAAJ,CAAQ,aAAR,EAAuB,UAACX,GAAD,EAAMC,GAAN,EAAc;AACjC,wBAAMW,IAAN,CAAW,EAAEU,QAAQtB,IAAIgB,MAAJ,CAAWC,EAArB,EAAX,EAAsC,UAACV,GAAD,EAAM2B,MAAN,EAAiB;AACnD,gBAAG3B,GAAH,EAAQ;AACJN,oBAAIO,IAAJ,CAASD,GAAT;AACH;AACDN,gBAAIQ,IAAJ,CAASyB,MAAT;AACH,SALD;AAMH,KAPD;;AASA;AACApC,QAAIC,IAAJ,CAAS,iBAAT,EAA4B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtC,yBAAOc,QAAP,CAAgBf,IAAIgB,MAAJ,CAAWC,EAA3B,EAA+B,UAACV,GAAD,EAAMe,MAAN,EAAiB;AAC5C,gBAAGf,GAAH,EAAQ;AACJN,oBAAIO,IAAJ,CAASD,GAAT;AACH;AACD,gBAAI4B,WAAW,qBAAf;AACAA,qBAASC,IAAT,GAAgBpC,IAAII,IAAJ,CAASgC,IAAzB;AACAD,qBAASE,IAAT,GAAgBrC,IAAII,IAAJ,CAASiC,IAAzB;AACAF,qBAASG,MAAT,GAAkBtC,IAAII,IAAJ,CAASkC,MAA3B;AACAH,qBAASb,MAAT,GAAkBA,OAAOD,GAAzB;AACAc,qBAAS7B,IAAT,CAAc,UAACC,GAAD,EAAMgB,KAAN,EAAgB;AAC1B,oBAAGhB,GAAH,EAAQ;AACJN,wBAAIO,IAAJ,CAASD,GAAT;AACH;AACDe,uBAAOY,MAAP,CAAcH,IAAd,CAAmBI,QAAnB;AACAb,uBAAOhB,IAAP,CAAY,eAAO;AACf,wBAAGC,GAAH,EAAQ;AACJN,4BAAIO,IAAJ,CAASD,GAAT;AACH;AACDN,wBAAIQ,IAAJ,CAAS,EAAEC,SAAS,2BAAX,EAAT;AACH,iBALD;AAMH,aAXD;AAYH,SArBD;AAsBH,KAvBD;;AAyBA;AACAZ,QAAIgB,MAAJ,CAAW,aAAX,EAA0B,UAACd,GAAD,EAAMC,GAAN,EAAc;AACpC,wBAAMwB,iBAAN,CAAwBzB,IAAIgB,MAAJ,CAAWC,EAAnC,EAAuC,UAACV,GAAD,EAAMgB,KAAN,EAAgB;AACnD,gBAAIG,WAAW;AACXhB,yBAAS,4BADE;AAEXO,oBAAIM,MAAMF;AAFC,aAAf;AAIApB,gBAAIkB,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqBkB,QAArB;AACH,SAND;AAOH,KARD;;AAUA,WAAO5B,GAAP;AACH,C","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport User from '../model/user';\nimport Course from '../model/course';\nimport Grade from '../model/grade';\n\nexport default({ config, db }) => {\n    let api = Router();\n\n    // USER operations.\n\n    // '/v1/user/add' - CREATE user.\n    api.post('/add', (req, res) => {\n       let newUser = new User();\n       newUser.username = req.body.username;\n       newUser.password = req.body.password;\n       newUser.save(err => {\n           if(err) {\n               res.send(err);\n           }\n           res.json({ message: 'User saved successfully.' });\n       });\n    });\n\n    // GET users.\n    api.get('/', (req, res) => {\n        User.find({}, (err, users) => {\n            if(err) {\n                res.send(err);\n            }\n            res.json(users);\n        });\n    });\n\n    // '/v1/user/:id' - DELETE an user and associated values.\n    api.delete('/:id', (req, res) => {\n        User.findById(req.params.id, (err, user) => {\n            if(err) {\n                res.status(500).send(err);\n                return;\n            }\n            if(user === null) {\n                res.status(404).send(\"User not found.\");\n                return;\n            }\n            User.remove({\n                _id: req.params.id\n            }, (err, user) => {\n                if(err) {\n                    res.status(500).send(err);\n                    return;\n                }\n                Course.remove({\n                    user: req.params.id\n                }, (err, course) => {\n                    if(err) {\n                        res.status(500).send(err);\n                        return;\n                    }\n                    Grade.remove({\n                        course: req.params.id\n                    }, (err, grade) => {\n                        if(err) {\n                            res.send(err);\n                        }\n                        res.json({ message: \"User successfully removed.\" });\n                    });\n                });\n            });\n        });\n    });\n\n    // COURSE operations.\n\n    // '/v1/user/courses/:id' - READ courses for user.\n    api.get('/courses/:id', (req, res) => {\n        Course.find({ user: req.params.id }, (err, courses) => {\n            if(err) {\n                res.send(err);\n            }\n            res.json(courses);\n        });\n    });\n\n    // '/v1/user/courses/:id' - DELETE a course.\n    api.delete('/courses/:id', (req, res) => {\n        Course.findByIdAndRemove(req.params.id, (err, course) => {\n            let response = {\n                message: \"Course successfully removed\",\n                id: course._id\n            };\n            res.status(200).send(response);\n        });\n    });\n\n    // '/v1/user/courses/add/:id' - CREATE course.\n    api.post('/courses/add/:id', (req, res) => {\n        User.findById(req.params.id, (err, user) => {\n            if(err) {\n                res.send(err);\n            }\n            let newCourse = new Course();\n            newCourse.title = req.body.title;\n            newCourse.credits = req.body.credits;\n            newCourse.instructor = req.body.instructor;\n            newCourse.user = user._id;\n            newCourse.save((err, course) => {\n                if(err) {\n                    res.send(err);\n                }\n                user.courses.push(newCourse);\n                user.save(err => {\n                    if(err) {\n                        res.send(err);\n                    }\n                    res.json({ message: \"Course saved successfully.\" });\n                });\n            });\n        });\n    });\n\n    // '/v1/user/courses/update/:id' - UPDATE course.\n    api.put('/courses/update/:id', (req, res) => {\n        Course.findById(req.params.id, (err, course) => {\n            if (err) {\n                res.send(err);\n            }\n            course.title = req.body.title;\n            course.credits = req.body.credits;\n            course.instructor = req.body.instructor;\n            course.average = req.body.average;\n            course.save(err => {\n                if (err) {\n                    res.send(err);\n                }\n                res.json({ message: \"Course info updated.\" });\n            });\n        });\n    });\n\n    // GRADES operations.\n\n    // '/v1/user/grades/:id' - READ grades for course.\n    api.get('/grades/:id', (req, res) => {\n        Grade.find({ course: req.params.id }, (err, grades) => {\n            if(err) {\n                res.send(err);\n            }\n            res.json(grades);\n        });\n    });\n\n    // '/v1/user/grades/add/:id' - CREATE grade.\n    api.post('/grades/add/:id', (req, res) => {\n        Course.findById(req.params.id, (err, course) => {\n            if(err) {\n                res.send(err);\n            }\n            let newGrade = new Grade();\n            newGrade.name = req.body.name;\n            newGrade.mark = req.body.mark;\n            newGrade.weight = req.body.weight;\n            newGrade.course = course._id;\n            newGrade.save((err, grade) => {\n                if(err) {\n                    res.send(err);\n                }\n                course.grades.push(newGrade);\n                course.save(err => {\n                    if(err) {\n                        res.send(err);\n                    }\n                    res.json({ message: \"Grade saved successfully.\" });\n                });\n            });\n        });\n    });\n\n    // '/v1/user/grades/:id' - DELETE a grade.\n    api.delete('/grades/:id', (req, res) => {\n        Grade.findByIdAndRemove(req.params.id, (err, grade) => {\n            let response = {\n                message: \"Grade successfully removed\",\n                id: grade._id\n            };\n            res.status(200).send(response);\n        });\n    });\n\n    return api;\n}"]}